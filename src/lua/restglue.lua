local https = require "ssl.https"
local ltn12 = require "ltn12"

-- NWNXEE:Lua's NWNX_Lua_Eval() doesn't pass along what's returned from the script at
-- least not strings.  If something else was needed to be returned it wasn't documented
--
-- Usage note: This is a very basic implementation.  Only use for short in/out messages.
--
-- Arguments are uuid|method|url where
-- - uuid   Generated by the calling script via GetRandomUUID() and is used to identify
--          the request body, response code, and response body (see UUID vars)
-- - method POST,GET,DELETE,etc. and the 
-- - url    The full qualified path. eg. https://example.com:3333/v1/crazyapi/oogly/5
--
-- UUID variables
-- - The request body is supplied via an NWN LocalString set on the module named with the <uuid>:body
-- - The response code will be set as a module LocalInt named <uuid>:code
-- - The response body will be set as a module LocalString named <uuid>:response
--
-- The calling NWN script is responsible for cleaning up the local vars
-- see: restcall_inc.nss
function doREST(args)
    -- NWNXEE:Lua only allows one argument.  SMDH
    -- Split on |
    local i = args:gmatch("([^|]*)[|]*")
    local uuid = i()
    local methodarg = i()
    local urlarg = i()

    -- Embedding the JSON into args started to run into quoting hell
    -- Easier just to smuggle the JSON string via a local var
    local oModule = GetModule()
    local body = GetLocalString(oModule,uuid..":body")
    local response = {}

    local res, code, headers, statusline = https.request {
        url = urlarg,
        method = methodarg,
        headers = {
            ["Content-Type"] = "application/json",
            ["Content-Length"] = string.len(body)
        },
        source = ltn12.source.string(body),
        sink = ltn12.sink.table(response)
    }

    local response_body = "<not set>"

    if res == nil then
        -- connection errors return nil, reason
        response_body = code
        code = -1
    else
        -- http[s].request dumps the response body into a table as chunks
        -- use table.concat to reconstitue the body as a string
        response_body = table.concat(response)
    end

    if response_body == nil then
        response_body = "#not set#"
    end

    -- Fix NWNX_Lua_Eval()
    SetLocalInt(oModule,uuid..":code",code)
    SetLocalString(oModule,uuid..":response",response_body)
end
